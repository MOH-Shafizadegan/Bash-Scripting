#!/bin/bash

# Check if the user provided a filename as an argument
if [ -z "$2" ]; then
  echo "No filename as input argument! Try again"
  exit 1
fi

# Define the threshold for cpu and memory usage (in percentage)
cpu_threshold=$1
mem_threshold=80

while true; do
	
	date=$(date --iso-8601=seconds)
	
	top_output=$(top -b -n 1)
	
	# Process the output of top and free with awk
	  awk -v date="$date" -v filename="$filename" -v cpu_threshold="$cpu_threshold" -v mem_threshold="$mem_threshold" '
	    # Define a function to print a warning message to both terminal and file
	    function warn(msg) {
	      print date ": WARNING: " msg | "tee -a " filename
	    }
	    # If this is the first line of top output, skip it
	    NR == 1 { next }
	    # If this is the second line of top output, get the total cpu usage from column 9
	    NR == 2 { total_cpu = $9; next }
	    # If this is a line from free output, get the total and free memory from columns 2 and 4
	    $1 == "Mem:" { total_mem = $2; free_mem = $4; next }
	    # If this is a line from top output, get the cpu, memory, pid and command from columns 9, 10, 1 and 12
	    $9 ~ /^[0-9.]+$/ { cpu = $9; mem = $10; pid = $1; comm = $12 }
	    # Calculate the percentage of free memory
	    free_mem_pct = free_mem / total_mem * 100
	    # Check if any process is using more than cpu_threshold% of total cpu usage
	    if (cpu > total_cpu * cpu_threshold / 100) {
	      warn("Process " pid " (" comm ") is using " cpu "% CPU")
	    }
	    # Check if any process is using more than mem_threshold% of memory usage
	    if (mem > mem_threshold) {
	      warn("Process " pid " (" comm ") is using " mem "% Memory")
	    }
	    # Check if the system has less than mem_threshold% of free memory
	    if (free_mem_pct < mem_threshold) {
	      warn("System has only " free_mem_pct "% Free Memory")
	    }
	  ' <<< "$top_output"$'\n'"$free_output"

	  # Sleep for one second before repeating the loop
	  sleep 1
	
	
done
